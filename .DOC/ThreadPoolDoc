thread: tạo luồng
mutex: khi threads chạy thì các threads chia sẻ dữ liệu chung (trừ khi khai báo thread_local).
    Nếu hai threads cùng truy cập cùng 1 dữ liệu (biến) thì dẫn
    tới lỗi là data race. Để khắc phục tình trạng này thì tạo biến mutex
    trước khi truy cập dữ liệu chung, khóa (lock) biến mutex để 
    các thread khác không truy cập được và unlock khi không cần sử dụng

unique_lock: thay vì gọi thủ công unlock thì unique_lock sẽ tự động
    unlock khi rời khỏi scope.

condition_variable: dùng hàm wait(lock, ...) thì nó sẽ xóa lock hiện tại
    để các thread khác có thể truy cập dữ liệu. Khi cần chạy lại thì gọi hàm
    notify_one (để mở 1 luồng) hoặc notify_all (để cho tất cả luồng)
    khi thread nhận được notify thì nó sẽ check hầm ... nếu trả về true thì khởi tạo lại
    lock và chạy tiếp.

thread::hardware_concurrency(): 

ThreadPool thực chất là tạo sẵn một workers để chạy thread.
Ban đầu workers sẽ chờ (wait). Khi một công việc được push vào tasks thì 
tasks sẽ notify để 1 thread trong workers làm việc. Làm việc xong thì workers 
lại tiếp tục chờ công việc tiếp theo...

Destructor: đóng tất cả các thread.

atomic: một biến được xử lí tốt tình trạng data race mà không cần mutex
